###############################################################################
#                                                                             #
# levels.py                                                                   #
#                                                                             #
# Contains all the code for reading and generating levels.  Later developers  #
# could add code to load these as a CSV file, or tweak it so the blocks have  #
# special properties other than changing color.                               #
#                                                                             #
# Important classes:                                                          #
# LevelFactory: Takes an array of numbers and "manufactures" Block objects.   #
#                                                                             #
#                                                                             #
#                                                                             #
###############################################################################

from constants import *
from bounceables import *

level = [
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,6,0,0,0,6,0,
0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,6,0,0,0,6,0,
0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,6,0,0,0,6,0,
0,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,0,
0,0,0,0,0,0,6,0,0,0,6,6,6,0,6,6,6,0,0,0,6,0,6,0,6,0,6,0,0,
0,0,0,0,0,0,6,0,0,0,6,0,6,0,6,0,6,0,0,0,6,0,6,0,6,0,6,0,0,
0,0,0,0,0,0,6,0,0,0,6,6,6,0,6,6,6,0,0,0,0,6,0,0,0,6,0,0,0,
0,6,6,6,6,6,6,0,0,0,0,6,0,0,0,6,0,0,0,0,0,6,0,0,0,6,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,6,6,6,6,6,6,0,0,6,6,6,6,6,6,6,6,6,0,0,0,6,6,6,6,6,0,0,0,
0,6,0,0,0,0,6,0,0,6,0,0,0,0,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,
0,6,0,0,0,0,6,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,
0,6,0,0,0,0,6,0,0,6,0,0,6,0,6,0,0,6,0,0,0,6,0,0,0,6,0,0,0,
0,6,0,0,6,0,6,0,0,6,0,6,0,0,0,6,0,6,0,0,0,6,6,6,6,6,0,0,0,
0,6,0,0,0,6,6,0,0,6,0,6,0,0,0,6,0,6,0,0,0,6,0,0,6,0,0,0,0,
0,6,6,6,6,6,6,0,0,6,0,6,0,0,0,6,0,6,0,0,0,6,0,0,0,6,0,0,0,
0,0,0,0,0,0,0,6,0,6,6,6,0,0,0,6,6,6,0,0,0,6,0,0,0,0,6,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
]

class LevelFactory:

    def __init__(self):
        self.block_array = []
        vertical_offset_index = 0
        for x in range(0,len(level)-1):
            if (x % BLOCKS_ACROSS) == 0:
                vertical_offset_index+=1
            self.block_array.append(Block(level[x],pygame.Rect(((x % (BLOCKS_ACROSS))*BLOCK_WIDTH,(vertical_offset_index*BLOCK_HEIGHT),BLOCK_WIDTH,BLOCK_HEIGHT))))


            
